== PHP v4.0 API Reference for Realtime Apps

=== Configuration

====== Method(s)

[source, php]
----
new PNConfiguration();
----

|===
|Properties | Type | Required | Defaults | Description

|`subscribeKey` | string | Yes | | `subscribeKey` from admin panel
|`publishKey` | string | Optional | None | `publishKey` from admin panel (only required if publishing)
|`secretKey` | string | Optional | None | `secretKey`  (only required for modifying/revealing access permissions)
|`cipherKey` | string | Optional | None | If `cipherKey` is passed, all communications to/from PubNub will be encrypted.
|`uuid` | string | Optional | SDK generated uuid | `uuid` to be used as a device identifier, a default `uuid` is generated if not passed.
|`authKey` | string | Optional | None | If Access Manager is utilized, client will use this `authKey` in all restricted requests.
|`ssl` | bool | Optional | True | Use `SSL`
|`connectTimeout` | int | Optional | 10 | How long to wait before giving up connection to client.
|`subscribeTimeout` | int | Optional | 310 | How long to keep the `subscribe` loop running before disconnect.
|`nonSubscribeRequestTimeout` | int | Optional | 10 | On `non subscribe` operations, how long to wait for server response.
|`filterExpression` | string | Optional | None | Feature to subscribe with a custom filter expression.
|`origin` | string | Optional | `pubsub.pubnub.com` | Custom `origin` if needed
|===

====== Basic Usage


[source, php]
----
use PubNub\PNConfiguration;

$pnConfiguration = new PNConfiguration();

// subscribeKey from admin panel
$pnConfiguration->setSubscribeKey("my_sub_key"); // required

// publishKey from admin panel (only required if publishing)
$pnConfiguration->setPublishKey("my_pub_key");

// secretKey (only required for modifying/revealing access permissions)
$pnConfiguration->setSecretKey("my_secretKey");

// if cipherKey is passed, all communicatons to/from pubnub will be encrypted
$pnConfiguration->setCipherKey("my_cipherKey");

// UUID to be used as a device identifier, a default UUID is generated
// if not passsed
$pnConfiguration->setUuid("my_custom_uuid");

// if Access Manager is utilized, client will use this authKey in all restricted
// requests
$pnConfiguration->setAuthKey("my_auth_key");

// use SSL (enabled by default)
$pnConfiguration->setSecure(true);

// how long to wait before giving up connection to client
$pnConfiguration->setConnectTimeout(100);

// how long to keep the subscribe loop running before disconnect
$pnConfiguration->setSubscribeTimeout(310);

// on non subscribe operations, how long to wait for server response
$pnConfiguration->setNonSubscribeRequestTimeout(300);

// PSV2 feature to subscribe with a custom filter expression
$pnConfiguration->setFilterExpression("such = wow");
----

=== Initialization

====== Methods

[source, php]
----
use PubNub\PubNub;

$pubnub = new PubNub($pnconf);
----

|====
|Parameter | Type | Required | Description

|pnConfiguration | PNConfiguration | Yes | Goto Configuration for more details.
|====

====== Basic Usage

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");
$pnConfiguration->setPublishKey("my_pub_key");

$pubnub = new PubNub($pnConfiguration);
----

====== Other examples
1. Initialize a non-secure client

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");
$pnConfiguration->setPublishKey("my_pub_key");
$pnConfiguration->setSecure(false);

$pubnub = new PubNub($pnConfiguration);
----

2. Initialization for a Read-Only client
(In the case where a client will only read messages and never publish to a
channel, you can simply omit the publishKey when initializing the client):

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");

$pubnub = new PubNub($pnConfiguration);
----

3. Specify a custom uuid (Under certain circumstances it useful to use
a custom UUID to help in identifying your users):

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");
$pnConfiguration->setPublishKey("my_pub_key");
$pnConfiguration->setUuid("my_custom_uuid");

$pubnub = new PubNub($pnConfiguration);
----

4. Initializing with SSL Enabled (This examples
demonstrates how to enable PubNub Transport Layer
Encryption with SSL. Just initialize the client with ssl
set to true. The hard work is done, now the PubNub
API takes care of the rest. Just subscribe and publish
as usual and you are good to go):

WARNING: In PHP v4 SDK SSL is enabled by default, no need for this snippet
[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");
$pnConfiguration->setPublishKey("my_pub_key");

$pubnub = new PubNub($pnConfiguration);
----

5. Initializing with Access Manager (For applications
that will administer PAM permissions, the API is
initialized with the secretKey as in the following example):

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnConfiguration = new PNConfiguration();

$pnConfiguration->setSubscribeKey("my_sub_key");
$pnConfiguration->setPublishKey("my_pub_key");
$pnConfiguration->setSecretKey("my_secret_key");

$pubnub = new PubNub($pnConfiguration);
----

6. Initialize with demo/demo pub/sub keys:

[source, php]
----
use PubNub\PubNub;

$pubnub = PubNub::demo();
----

=== UUID

====== Methods

[source, php]
----
$pnconf->setUuid(string);
----

|====
|Parameter|Type|Required|Default|Description

|`uuid`|string|Yes|`SDK generated uuid`| `UUID` to be used as a device identifier, a default `UUID` is generated if not passed.
|====

[source, php]
----
$pnconf->getUuid();
----

====== Basic Usage

[source, php]
.Set Uuid
----
$pnconf = new PNConfiguration();
$pnconf->setUuid("my_uuid");
----

[source, php]
.Get Uuid
----
$pubnub->getConfiguration()->getUuid();
----

=== Authentication Key

[source, php]
----
$pnconf->setAuthKey(string);
----
|====
|Parameter|Type|Required|Description

|`AuthKey`|string|Yes|If Access Manager is utilized, client will use this `authKey` in all restricted requests.
|====

[source, php]
----
$pnconf->getAuthKey();
----

====== Basic Usage

[source, php]
.Set Uuid
----
$pnconf = new PNConfiguration();
$pnconf->setUuid("authKey");
----

[source, php]
.Get Uuid
----
$pubnub->getConfiguration()->getAuthKey();
----
=== Publish

====== Methods

[source, php]
----
$pubnub->publish()->channel(string|array)->message(array|string)->shouldStore(bool)->meta(array)->usePost(bool)->sync();
----

|====
|Parameter|Type|Required|Default|Description
|message|object|Yes||The payload
|channel|string|Yes||Destination of `message`
|shouldStore|bool|Optional| `account default` | Store in history
|usePost|bool|Optional| `false` | Use POST to `publish`
|meta|object|Optional| `null` | Meta data object which can be used with the filtering ability
|use_post|bool|False|Use POST to publish
|====

====== Basic Usage

[source, php]
----
$result = $pubnub->publish()
    ->channel("my_channel")
    ->message(["hello", "there"])
    ->usePost(true)
    ->sync();
----

====== Response

The `publish()` operation returns a `PNPublishResult` which contains the following fields:
|====
| Method | Type | Description
| getTimetoken() | int | an `int` representation of the time token when the message was published
|====

====== Other Examples
Publish with metadata

[source, php]
----
$result = $pubnub->publish()
    ->channel("my_channel")
    ->message(["hello", "there"])
    ->meta(["name" => "Alex"])
    ->sync();
----

Publish array

[source, php]
----
use PubNub\Exceptions\PubNubException;

try {
    $result = $pubnub->publish()
        ->channel("my_channel")
        ->message(["hello", "there"])
        ->meta(["name" => "Alex", "online" => true])
        ->sync();
    print_r($result->getTimetoken());
} catch (PubNubException $error) {
    handleExpection($error);
}
----

=== Subscribe

[source, php]
----
$pubnub->subscribe()->channel(string|array)->channelGroups(string|array)->withTimetoken(bool)->withPresence(bool)->execute();
----

|====
| Parameter | Type | Required| Description
| channels | str\|array | Optional | Subscribe to `channels`, Either `channel` or `channel_group` is required
| channelGroups | str\|array | Optional | Subscribe to `channel_groups`, Either `channel` or `channel_group` is required
| withTimetoken | int | Optional | Pass a timetoken
| withPresence | bool | Optional | Also subscribe to related presence information
|====

====== Basic Usage

[source, php]
----
$pubnub->subscribe->channels("my_channel")->execute();
----

====== Response

PNMessageResult
|====
| Method | Type | Description
| getMessage() | object | The message sent on `channel`
| getSubscription() | str | The channel on which the message was received
| getTimetoken() | int | Timetoken for the message.
|====

PNPresenceEventResult
|====
| Method | Type | Description
| getStatusCode() | int | Events like `join`, `leave`, `timeout`, `state-change`.
| getUuid() | string | `uuid` for event
| getTimestamp() | int | `timestamp` for event
| getOccupancy() | int | Current `occupancy`
| getSubscription() | str | Message has been received on `channel`
| getTimetoken() | int| `timetoken` of the message
|====

====== Other Examples
1. Basic subscribe with logging

[source, php]
----
use Monolog\Handler\ErrorLogHandler;
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnconf = new PNConfiguration();

$pnconf->setPublishKey("demo");
$pnconf->setSubscribeKey("demo");

$pubnub = new PubNub($pnconf);

$pubnub->getLogger()->pushHandler(new ErrorLogHandler());

$pubnub->subscribe()->channels("my_channel")->execute();
----

2. Subscribing to more than one channel (It is possible to subscribe
to more than one channel over a single TCP socket by taking
advantage of Multiplexing feature. See the Multiplexing section for
more info on this feature as well as the examples below using a array
or an array to specify channel name):

[source, php]
----
$pubnub->subscribe()->channels(["my_channel1", "my_channel2"])->execute();
----

3. Subscribing to a Presence channel (For any given channel there is an
associated Presence channel. You can subscribe directly to the
channel by appending -pnpres to the channel name. For example
the channel named my_channel would have the presence channel named my_channel-pnpres):

[source, php]
----
$pubnub->subscribe()->channels("my_channel")->withPresence()->execute();
----

4. Wildcard subscribe to channels (Wildcard subscribes allow the client
to subscribe to multiple channels using wildcard. E.g., if you
subscribe to a.* you will get all messages for a.b, a.c, a.x. The
wildcarded * portion refers to any portion of the channel string name
after the dot (.)):

[source, php]
----
$pubnub->subscribe()->channels("foo.*")->execute();
----

5. Subscribing with state:

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnconf = new PNConfiguration();

$pnconf->setPublishKey("demo");
$pnconf->setSubscribeKey("demo");

$pubnub = new PubNub($pnconf);

$state = [
    'field_a' => 'awesome',
    'field_b' => 10
];

$result = $pubnub
    ->setState()
    ->channels("awesome_channel")
    ->channelGroups("awesome_channel_group")
    ->state($state)
    ->sync();

$subscribeCallback = new MySubscribeCallback();

$pubnub->addListener($subscribeCallback);

$pubnub->subscribe()
    ->channels("awesome_channel")
    ->execute();
----

6. Subscribe to a channel group:

[source, php]
----
$pubnub->subscribe()
    ->channelGroups(["cg1", "cg2"])
    ->execute();
----

7. Subscribe to a presence channel of a channel group:

[source, php]
----
$pubnub->subscribe()
    ->channelGroups(["cg1", "cg2"])
    ->withPresence()
    ->execute();
----

=== Unsubscribe

====== Methods
To unsubscribe you should throw `PubNubUnsubscribeException` somewhere inside `status`/`message`/`presence` callbacks of your subscribe listeners.
You should specify channel and/or channel group names to unsubscribe and keep a subscription loop running if some other channels left.
Otherwise the exception will unsubscribe from all channels and channel-groups.

[source, php]
----
(new PubNubUnsubscribeException())->setChannels(array)->setChannelGroups(array);
----

|===
| Parameter | Type | Required | Defaults | Description
| getChannels | string | false | | The `channels` to get the here now details.
| getChannelGroups | string | false | | The `channel groups` to get the here now details.
| setChannels | array | Optional | False | Unsubscribe to channels, Either channel or channelGroup is required
| setChannelGroups | array | Optional | false | Unsubscribe to channel groups, Either channel or channelGroup is required
|===

====== Basic Usage

[source, php]
----
use PubNub\Callbacks\SubscribeCallback;
use PubNub\Exceptions\PubNubUnsubscribeException;

class MySubscribeCallback extends SubscribeCallback
{
    function status($pubnub, $status)
    {
        throw (new PubNubUnsubscribeException())->setChannels(["my_channel"]);
    }

    function message($pubnub, $message)
    {
    }

    function presence($pubnub, $presence)
    {
    }
}
----

====== Other Examples
[source, php]
.Unsubscribe from a channel group
----
use PubNub\Callbacks\SubscribeCallback;
use PubNub\Exceptions\PubNubUnsubscribeException;

class MySubscribeCallback extends SubscribeCallback
{
    function status($pubnub, $status)
    {
        throw (new PubNubUnsubscribeException())->setChannelGroups(["my_channel"]);
    }

    function message($pubnub, $message)
    {
    }

    function presence($pubnub, $presence)
    {
    }
}
----

[source, php]
.Unsubscribe from all channels and channel groups
----
use PubNub\Callbacks\SubscribeCallback;
use PubNub\Exceptions\PubNubUnsubscribeException;

class MySubscribeCallback extends SubscribeCallback
{
    function status($pubnub, $status)
    {
        throw new PubNubUnsubscribeException();
    }

    function message($pubnub, $message)
    {
    }

    function presence($pubnub, $presence)
    {
    }
}
----

=== Listeners

====== Add Listener

[source, php]
----
use PubNub\Callbacks\SubscribeCallback;
use PubNub\Enums\PNStatusCategory;

class MySubscribeCallback extends SubscribeCallback
{
    function status($pubnub, $status)
    {
        if ($status->getCategory() === PNStatusCategory::PNConnectedCategory) {
            print("Connected");
        }
    }

    function message($pubnub, $message)
    {
    }

    function presence($pubnub, $presence)
    {
    }
}

$subscribeCallback = new MySubscribeCallback();

$pubnub->addListener($subscribeCallback);

$pubnub->subscribe()->channels("my_channel")->execute();
----

====== Remove Listener

[source, php]
----
use PubNub\Callbacks\SubscribeCallback;
use PubNub\Enums\PNStatusCategory;

class MySubscribeCallback extends SubscribeCallback
{
    function status($pubnub, $status)
    {
    }

    function message($pubnub, $message)
    {
    }

    function presence($pubnub, $presence)
    {
    }
}

$subscribeCallback = new MySubscribeCallback();

$pubnub->addListener($subscribeCallback);

$pubnub->removeListener($subscribeCallback);
----

=== Here Now

====== Methods

[source, php]
----
$pubnub->hereNow()->channels(string|array)->includeState(bool)->includeUuids(bool)->sync();
----

|===
| Parameter | Type | Required | Defaults | Description
| channels | str\|array| Optional | | The `channels` to get the here now details.
| channelGroups | str\|array | Optional | | The `channel groups` to get the here now details.
| includeState | bool | Optional | False | If `true`, the response will include the presence states of the users for channels/channelGroups
| includeUuids | bool | Optional | True | If `true`, the response will include the UUIDs of the connected clients
|===

====== Basic Usage

[source, php]
----
try {
    $result = $pubnub->hereNow()->channels(["my_channel", "demo"])->includeUuids(true)->sync();
} catch (PubNubException $err) {
    print_r($err);
}

foreach ($result->getChannels() as $channelData) {
    print("---\n");
    printf("channel: %s\n", $channelData->getChannelName());
    printf("occupancy: %s\n", $channelData->getOccupancy());

    foreach ($channelData->getOccupants() as $occupant) {
        printf("uuid: %s, state: %s\n", $occupant->getUuid(), $occupant->getState());
    }
}
----

====== Response

The `here_now()` operation returns a `PNHereNowResult` which contains the following fields:
|===
| Method | Type | Description
| getTotalChannels() | int | Total `channels`
| getTotalOccupancy() | int | Total `occupancy`
| getChannels() | array | A array with values of PNHereNowChannelData for each channel. See PNHereNowChannelData for more details.
|===

`PNHereNowChannelData`:
|===
| Method | Type | Description
| getChannelName() | str | `channel` name
| getOccupancy() | int | `occupancy` of the `channel`
| getOccupants() | array | A array of `PNHereNowOccupantData`, see `PNHereNowOccupantData` for more details.
|===

`PNHereNowOccupantData`:
|===
| Method | Type | Description
| getUuid() | str | `uuid` of the user
| getState() | array | `state` of the user.
|===

====== Other Examples

[source, php]
.1. Returning State
----
$result = $pubnub->hereNow()->channels("my_channel")->includeUuids(true)->includeState(true)->sync();
----

[source, json]
.Example Response
----
{
    "status" : 200,
    "message" : "OK",
    "service" : "Presence",
    "uuids" : [
        {
            "uuid" : "myUUID0"
        },
        {
            "state" : {
                "abcd" : {
                    "age" : 15
                }
            },
            "uuid" : "myUUID1"
        },
        {
            "uuid" : "b9eb408c-bcec-4d34-b4c4-fabec057ad0d"
        },
        {
            "state" : {
                "abcd" : {
                    "age" : 15
                }
            },
            "uuid" : "myUUID2"
        },
        {
            "state" : {
                "abcd" : {
                    "age" : 24
                }
            },
            "uuid" : "myUUID9"
        }
    ],
    "occupancy" : 5
}
----

[source, php]
.2. Return Occupancy Only (You can return only the occupancy information for a single channel by specifying the channel and setting uuids to false):
----
$result = $pubnub->hereNow()->channels("my_channel")->includeUuids(false)->includeState(false)->sync();
----

[source, php]
.Example response
----
{
    "channels": {
        "my_channel": {
            "occupancy": 3
        }
    },
    "total_channels": 1,
    "total_occupancy": 3
}
----

[source, php]
.3. Returning uuids and occupancy for all channels (You can return the array of uuids and occupancy for all channels by omitting the channel):
----
$result = $pubnub->hereNow()->includeUuids(true)->includeState(false)->sync();
----

[source, php]
.Example response
----
{
    "total_channels" : 2,
    "total_occupancy" : 3,
    "channels" : {
        "lobby" : {
            "occupancy" : 1,
            "uuids" : [
                "dara01"
            ]
        },
        "game01" : {
            "occupancy" : 2,
            "uuids" : [
                "jason01",
                "jason02"
            ]
        }
    }
}
----

[source, php]
.4. Return `Occupancy` for all channels (You can return only the `occupancy` information (`Global Here Now`) by omitting the `channel name`):
----
$result = $pubnub->hereNow()->includeUuids(true)->includeState(true)->sync();
----

[source, json]
.Example response
----
{
    "channels": {
        "my_channel": {
            "occupancy": 3
        }
    },
    "total_channels": 1,
    "total_occupancy": 3
}
----

[source, php]
.5. Here Now for Channel Groups:
----
$pubnub->hereNow()->channelGroups(["cg1", "cg2", "cg3"])->includeUuids(true)->includeState(true)->sync();
----

[source, json]
.Example response
----
{
    "occupancy" : 4,
    "uuids" : ["123123234t234f34fq3dq", "143r34f34t34fq34q34q3", "23f34d3f4rq34r34rq23q", "w34tcw45t45tcw435tww3"]
}
----

=== Where Now

====== Methods

[source, php]
----
$pubnub->whereNow()->uuid(string)->sync();
----

|===
| Parameter | type | Required | Defaults | Description

| uuid | str | Optional | `uuid` to get info on
|===


====== Basic Usage

[source, php]
----
$result = $pubnub->whereNow()->sync();
----

====== Response

The whereNow() operation returns a PNWhereNowResult which contains the following operations:
|===
| Parameter|Type

| getChannels() | array | The list of channels where the UUID is present.
|===

====== Other Examples
[source, php]
----
$pubnub->whereNow()->uuid("some-other-uuid")->sync();
----

=== User State

====== Methods

[source, php]
----
$pubnub->setState()->channels(string|array)->channelGroups(string|array)->state(array)->sync();
----

|===
| Parameter | Type | Required | Description

| channels | str\|array | Optional | `channels` to set `state`
| channelGroups | str\|array | Optional | `channel groups` to set `state`
| state | array | Optional | `state` to set
|===

[source, php]
----
$pubnub->getState()->channels(string|array)->channelGroups(string|array)->sync();
----

|===
| Parameter | Type | Required | Description

| channels | str\|array | Optional | `channels` to get `state`
| channelGroups | str\|array | Optional | `channel groups` to get `state`
| uuid | string | Optional | `uuid`
|===
====== Basic Usage

[source, php]
.Set State:
----
$myState = [
    "age" => 20
];

$pubnub->setState()->channels(["ch1", "ch2", "ch3"])->state(["age" => 30])->sync();
----

[source, php]
.Get State:
----
$pubnub->getState()->channels(["cg1", "cg2", "cg3"])->sync();
----

====== Response
The `setState()` operation returns a `PNSetStateResult` which contains the following fields:

|===
| Method | Type | Description

| setState() | array | array  of UUIDs and the user states.
|===

The `getState()` operation returns a `PNGetStateResult` which contains the following fields:

|===
| Method | Type | Description

| getChannels() | array | array  of `channels` and the user states.
|===

====== Other Examples

[source, php]
.Set state for channels in a `channel group`:
----
$myState = [
    "age" => 20
];

$pubnub->setState()->channelGroups(["gr1", "gr2", "gr3"])->state(["age" => 30])->sync();
----

=== Grant

====== Methods

|===
| Parameter | Type | Required | Defaults | Description

| authKeys | str\|array\|array | Optional | | `auth keys`
| channels | str\|array\|array | Optional | | `channels` to grant access
| channelGroups | str\|array\|array | Optional | | `channel groups` to grant access
| read | bool| Optional | False | `read` permissions
| write | bool| Optional | False | `write` permissions
| manage | bool| Optional | False | `manage` permissions
| ttl | int | Optional | None | `time to live` for permissions to be valid
|===

====== Basic Usage

[source, php]
.Grant PAM Permissions for channel and auth key
----
$result = $pubnub->grant()
    ->channels(["ch1", "ch2", "ch3"])
    ->channelGroups(["cg1", "cg2"])
    ->authKeys(["key1", "key2"])
    ->read(true)
    ->write(true)
    ->manage(true)
    ->sync();
----

====== Response

The `grant()` operation returns a `PNAccessManagerGrantResult` which contains the following fields:
|===
| Method | Type | Description

| getLevel() | string | Permissions level, one of `subkey`, `subkey+auth`, `channel`, 'channel-group',
 channel-group+auth' level
| getTtl() | int | `ttl` of grant
| getSubscribeKey()| string | The `subscribe key`
| getChannels() | array | Access rights per channel. See `PNAccessManagerChannelData` for more details.
| isReadEnabled() | bool | subkey level `read` permissions
| isWriteEnabled()| bool | subkey level `write` permissions
| isManageEnabled() | bool | subkey level `manage` permissions
| getTtl() | int | Time to live value
|===

`PNAccessManagerChannelData` and `PNAccessManagerGroupData` has the same fields structure.
|===
| Method | Type | Description

| getAuthKeys() | array | Access rights per auth-key. See `PNAccessManagerKeyData` for more details.
| getName() | str | Channel or group `name`
| isReadEnabled() | bool | Channel or group level `read` permissions
| isWriteEnabled()| bool | Channel or group level `write` permissions
| isManageEnabled() | bool | Channel or group level `manage` permissions
| getTtl() | int | Time to live value
|===

`PNAccessManagerKeyData`:
|===
| Method | Type | Description

| isReadEnabled() | bool | auth-key read permissions
| isWriteEnabled()| bool | auth-key read permissions
| isManageEnabled() | bool | auth-key read permissions
| getTtl() | int | Time to live value
|===


`read`, `write` and `manage` permissions has 3 states:

. `true` if `enabled`
. `false` if `disabled`
. `None` if `not explicitly set`

====== Other Examples

[source, php]
.1. Grant subscribe privileges to all users on all `channel(s)` with default ttl (`1440` minutes):
----
$pubnub->grant()->read(true)->write(true)->sync();
----

[source, php]
.2. Allow subscribe and publish to a specific grant subscribe and publish to a specific `channel` for all users (no auth_key required) with default ttl (`1440` minutes):
----
$pubnub->grant()->channels("my_channel")->read(true)->write(true)->sync();
----

[source, php]
.3. Grant subscribe access to a channel only for clients with a specific auth_key with a 5 minute ttl:
----
$pubnub->grant()->channels("my_channel")->read(false)->write(true)
    ->authKeys("my_ro_authkey")->ttl(5)->sync();
----

[source, php]
.4. Allow access to a specific channel for presence:
----
$pubnub->grant()->channels("my_channel-pnpres")->read(true)->write(true)->sync();
----

[source, php]
.5. Grant PAM Permissions for channel group:
----
$result = $pubnub->grant()
    ->channelGroups(["cg1", "cg2", "cg3"])
    ->authKeys(["key1", "key2", "auth3"])
    ->read(true)
    ->write(true)
    ->manage(true)
    ->ttl(12237)
    ->sync();
----

[source, php]
.6. Application level Grant
----
try {
$result = $pubnub->grant()
    ->read(true)
    ->write(true)
    ->sync();

print_r($result);
} catch (\PubNub\Exceptions\PubNubServerException $exception) {
    print_r($exception->getMessage() . "\n");
    print_r($exception->getStatusCode() . "\n");
    print_r($exception->getBody());
} catch (\PubNub\Exceptions\PubNubException $exception) {
    print_r($exception->getMessage());
}
----

[source, php]
.7. Channel level
----
$result = $pubnub->grant()
    ->channels("my_channel")
    ->read(true)
    ->write(true)
    ->sync();
----

[source, php]
.8. User level
----
$result = $pubnub->grant()
    ->channels("my_channel")
    ->authKeys("my_authkey")
    ->read(true)
    ->write(true)
    ->ttl(5)
    ->sync();
----

[source, php]
.6. Application level Grant
----
try {
$result = $pubnub->grant()
    ->read(true)
    ->write(true)
    ->sync();

print_r($result);
} catch (\PubNub\Exceptions\PubNubServerException $exception) {
    print_r($exception->getMessage() . "\n");
    print_r($exception->getStatusCode() . "\n");
    print_r($exception->getBody());
} catch (\PubNub\Exceptions\PubNubException $exception) {
    print_r($exception->getMessage());
}
----

[source, php]
.7. Channel level
----
$result = $pubnub->grant()
    ->channels("my_channel")
    ->read(true)
    ->write(true)
    ->sync();
----

[source, php]
.8. User level
----
$result = $pubnub->grant()
    ->channels("my_channel")
    ->authKeys("my_authkey")
    ->read(true)
    ->write(true)
    ->ttl(5)
    ->sync();
----

=== Adding Channels to Channel Group

====== Methods

[source, php]
----
$pubnub->addChannelToChannelGroup()
    ->channels(array|string)
    ->channelGroup(string)
    ->sync();
----

|===
| Parameter | Type | Required | Description

| channels | string |array | Yes | `channels` to add to the channel group
| channelGroup | string  | Yes | The `channel group` to add the channels to
|===

====== Basic usage

[source, php]
.Adding channels:
----
$pubnub->addChannelToChannelGroup()
    ->channels(["ch1", "ch2"])
    ->channelGroup("cg1")
    ->sync();
----

=== Listing Channels in Channels Group

====== Methods
arraying Channels is accomplished by using the following method(s) in the Python V4 SDK:

[source, php]
----
$pubnub->listChannelsInChannelGroup()
    ->channelGroup(string)
    ->sync();
----

|===
| Parameter | Type | Required | Description

| channelGroup | string | Yes | The `channel group` to fetch channels
|===

====== Basic usage

[source, php]
.Listing channels:
----
$pubnub->listChannelsInChannelGroup()
    ->channelGroup("cg1")
    ->sync();
----

=== Removing Channels from Channels Group

====== Methods

[source, php]
----
$pubnub->removeChannelFromChannelGroup()
    ->channels(string|array)
    ->channelGroup(string)
    ->sync();
----

|===
| Parameter | Type | Required | Description

| channels | string|array | Yes | `channels` remove from the channel group.
| channelGroup | string | Yes | The `channel group` to remove the channels from.
|===

====== Basic usage

[source, php]
.Removing channels:
----
$pubnub->removeChannelFromChannelGroup()
    ->channels(["ch1", "ch2"])
    ->channelGroup("cg1")
    ->sync();
----

=== Deleting Channel Group

[source, php]
----
$pubnub->removeChannelGroup()
    ->channelGroup(string)
    ->sync();
----

|===
| Parameter | Type | Required | Description

| channelGroup | string | Yes | The `channel group` to remove
|===

====== Basic Usage

[source, php]
.Deleting a Channel Group:
----
$pubnub->removeChannelGroup()
    ->channelGroup(string)
    ->sync();
----

=== History

====== Methods

[source, php]
----
$pubnub->history()
    ->channel(string)
    ->count(int)
    ->start(int)
    ->end(int)
    ->reverse(bool)
    ->includeTimetoken(bool)
    ->sync();
----

|===
| Parameter | type | Required | Defaults | Description

| channel | string | True | | Specifies `channel` to return history messages from.
| reverse | bool| Optional| false | Setting to true will traverse the time line in reverse starting with the oldest message first.
| includeTimetoken | bool| Optional| false | Whether event dates time tokens should be included in response or not.
| start | int | Optional| | Time token delimiting the start of time slice (exclusive) to pull messages from.
| end | int | Optional| | Time token delimiting the end of time slice (inclusive) to pull messages from.
| count | int | Optional| | Specifies the number of historical messages to return.
|===

====== Basic Usage

[source, php]
.Retrieve the last 100 messages on a channel:
----
$pubnub->history()
    ->channel("history_channel")
    ->count(100)
    ->sync();
----

====== Response

The history() operation returns a PNHistoryResult which contains the following fields:
|===
| Method | Type | Description

| getMessages() | array | array of messages of type PNHistoryItemResult. See PNHistoryItemResult for more details.
| getStartTimetoken() | int |Start timetoken
| getEndTimetoken() | int |End timetoken
|===

PNHistoryItemResult:
|===
| Method | Type | Description

| getTimetoken() | int | `Timetoken` of the message
| getEntry() | object | Message
|===

====== Other Examples

[source, php]
.1. Use history() to retrieve the three oldest messages by retrieving from the time line in reverse:
----
$pubnub->history()->channel("my_channel")->count(3)->reverse(true)->sync();
----

[source, json]
.Response
----
[
    ["Pub1","Pub2","Pub3"],
    13406746729185766,
    13406746780720711
]
----

[source, php]
.2. Use history() to retrieve messages newer than a given time token by paging from oldest message to newest message starting at a single point in time (exclusive):
----
$pubnub->history()->channel("my_channel")->start(13847168620721752)->reverse(true)->sync();
----


[source, json]
.Response
----
[
    ["Pub3","Pub4","Pub5"],
    13406746780720711,
    13406746845892666
]
----

[source, php]
.3. Use history() to retrieve messages until a given time token by paging from newest message to oldest message until a specific end point in time (inclusive):
----
$pubnub->history()->channel("my_channel")->count(100)->start(-1)->end(13847168819178600)->reverse(true)->sync();
----

[source, json]
.Response
----
[
    ["Pub3","Pub4","Pub5"],
    13406746780720711,
    13406746845892666
]
----

[source, php]
.4. Include timetoken in history response:
----
$pubnub->history()->channel("my_channel")->count(100)->includeTimetoken(true)->sync();
----

=== Adding Device to Channel

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->addChannelsToPush()
    ->pushType(PNPushType)
    ->channels(string|array)
    ->deviceId(string)
    ->sync();
----
|===
| Parameter | type | Required | Defaults | Description

| pushType | PNPushType | Yes | Not set | Accepted values: PNPushType.GCM, PNPushType.APNS, PNPushType.MPNS
| channels | array | Yes | | Add push notifications on the specified channels
| deviceId | string | Yes | | Device id
|===

====== Basic example

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->addChannelsToPush()
    ->pushType(PNPushType::GCM)
    ->channels(["ch1", "ch2", "ch3"])
    ->deviceId("deviceId")
    ->sync();
----

=== Listening Channels For Device

====== Methods

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->listPushProvisions()->pushType(PNPushType)->deviceId(string)->sync();
----

|===
| Parameter | type | Required | Defaults | Description

| pushType | PNPushType | Yes | Not set | Accepted values: PNPushType.GCM, PNPushType.APNS, PNPushType.MPNS
| deviceId | str | Yes | | Device id
|===

====== Basic example

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->arrayPushProvisions()->pushType(PNPushType::GCM)->deviceId("deviceId")->sync();
----

====== Response

|===
| Parameter | type | Required | Defaults | Description

| Method | Type | Description
| getChannels | array | array of channels subscribed for push notifications.
|===

=== Removing Device to Channel

====== Methods

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->removeChannelsFromPush()->pushType(PNPushType)->channels(string|array)->deviceId(string)->sync();
----

|===
| Parameter | type | Required | Defaults | Description

| getPushType | PNPushType | Yes | Not set | Accepted values: PNPushType.GCM, PNPushType.APNS, PNPushType.MPNS
| getChannels | array | Yes | | Remove push notifications from the specified channels
| getDeviceId | str | Yes | | Device id
|===

====== Basic Example

[source, php]
----
use PubNub\Enums\PNPushType;

$pubnub->removeChannelsFromPush()->pushType(PNPushType::GCM)->channels(["ch1", "ch2", "ch3"])->deviceId("deviceId")->sync();
----

=== Time

====== Methods

[source, php]
----
$pubnub->time()->sync();
----

====== Basic Usage

[source, php]
----
$pubnub->time()->sync();
----

====== Response

|===
| Method | type | Required | Defaults | Description

| getTimetoken() | int | false | | Returns a `date` representation of current time token.
|===

