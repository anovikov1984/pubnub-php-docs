== PHP V3 to PHP v4 Migration Guide

=== SDK Initialization is now done via PNConfiguration instance

- `V3` initiates via:

[source, php]
----
$pubnub = new Pubnub('demo', 'demo');
----

- `V4` initiates via:

[source, php]
----
$pnconf = new PNConfiguration();

$pnconf->setSubscribeKey("demo");
$pnconf->setPublishKey("demo");

$pubnub = new PubNub($pnconf);
----


=== Global Object Naming

* `v3` exposes `Pubnub`
* `v4` exposes `PubNub`

=== SDK Initialization is now done via PNConfiguration instance
- `V3`

[source, php]
----
use Pubnub\Pubnub;

$pubnub = new Pubnub("my_pub_key", "my_sub_key", "my_secret_key", "my_cipher_key", true);
----

- `V4`

[source, php]
----
use PubNub\PNConfiguration;
use PubNub\PubNub;

$pnconf = new PNConfiguration();

$pnconf->setSubscribeKey("my_sub_key");
$pnconf->setPublishKey("my_pub_key");

$pnconf->setSecretKey("my_secret_key");
$pnconf->setCipherKey("my_cipher_key");
$pnconf->setSecure(true);

$pubnub = new PubNub($pnconf);
----

=== Now methods are used instead of arguments

- `V3`

[source, php]
----
$pubnub->hereNow("my_channel", false, true);
----

- `V4`

[source, php]
----
$pubnub->hereNow()->channels("my_channel")->includeUuids(true)->includeState(true)->sync();
----

=== Subscribe no longer takes callback

- `V3` accepts a callback as a parameter to announce when messages come in.

- `V4` switches to the listener pattern for `messages`, `presence` and `status`.

=== Transactional requests (everything but subscribe, unsubscribe, presence) are now invoking using builders

- `V3`

[source, php]
----
$pubnub->pubish('my_channel', "Hello World!");
----

- `V4`

[source, php]
----
$pubnub->publish()->channel("my_channel")->message("Hello World!")->sync();
----

=== All subscribe callbacks (connect, reconnect, disconnect, message, error) are handled via listeners
* V3 exposes only message subscribe callback via method params.
* V4 exposes the functionality via listeners.

=== History payloads are now abstracted to reduce conditionals on client work

* V3 returned different data structures based on request params.
* V4 has standardized payload. Please refer to documentation http://www.pubnub.com/docs/php/api-reference#history_returns.

=== Status object is unified across all responses to allow error handling

* V4 returns a status object for each transactional request in the `envelope` and in the `status` portion of a listener or a callback.